// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

  model User {
    id          String      @id @default(uuid())
    username    String
    email       String      @unique
    password    String
    isVerified  Boolean     @default(false)
    role        Role        @default(CLIENT)
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt

    client Client?
    freelancer Freelancer?
    @@index([username])
  }

  model Client {
    userId              String   @id
    companyName         String?
    clientInfo          String?
    companyDescription  String?
    profilePhoto        String?
    user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    job                 Job[]
    projects            Project[]
    //@@index([userId, job])
  }

model Freelancer {
  userId                String   @id
  bio                   String?
  skills                String[]
  githubId              String?
  rating                Float?   @default(0)
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  profilePhoto          String?
  applications          Application[]
  projects               Project[] 
}

model Project {
  projectId       String @id @default(uuid())
  applicationId   String @unique
  jobId           String @unique
  freelancerId    String
  clientId        String
  status          ProjectStatus @default(IN_PROGRESS)
  clientRating    Int?
  clientReview    String?
  startedAt       DateTime? @default(now())
  completeAt      DateTime?

  job             Job         @relation (fields: [jobId], references: [id], onDelete: Cascade)
  application     Application @relation (fields: [applicationId], references: [id])
  freelancer      Freelancer  @relation (fields: [freelancerId], references: [userId])
  client          Client      @relation (fields: [clientId], references: [userId])
}

enum Role {
  CLIENT
  FREELANCER
  ADMIN
}

model Job {
  id                    String     @id @default(uuid())
  title                 String
  description           String
  budget                Int
  deadline              DateTime
  isAccepted            Boolean    @default(false)
  status                JobStatus  @default(OPEN)
  createdAt             DateTime   @default(now())
  modifiedAt            DateTime   @updatedAt

  projectId             Project?
  clientId    String
  client      Client      @relation(fields: [clientId], references: [userId])

  applications Application[]
}
enum JobStatus {
  OPEN
  CLOSED
  CANCELLED
}
enum ProjectStatus {
  IN_PROGRESS
  COMPLETED
}
enum ApplicationStatus{
  PENDING
  ACCEPTED
  REJECTED
}

model Application {
  id           String     @id @default(uuid())
  coverLetter  String
  proposedBudget Int
  duration      Int         
  createdAt     DateTime    @default(now())
  status       ApplicationStatus @default(PENDING)
  
  jobId        String
  job          Job         @relation(fields: [jobId], references: [id], onDelete: Cascade)
  projects     Project?

  freelancerId String
  freelancer   Freelancer  @relation(fields: [freelancerId], references: [userId])
}



